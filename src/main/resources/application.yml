server:
  port: 9000
spring:
  application:
    name: gateway
  profiles:
    # active: native # target: file directory
    active: git
  data:
    redis:
      connect-timeout: 2s
      host: localhost
      port: 6379
      timeout: 1s
  security:
    oauth2:
      resourceserver:
        jwt:
          # https://velog.io/@chane_ha_da/Start-Spring-Boot-Spring-Security-Oauth2-Client-Credentials
          # http://localhost:7080/realms/group1team2/.well-known/openid-configuration
          jwk-set-uri: "http://192.168.100.221:30202/realms/group1team2/protocol/openid-connect/certs"
          # jwk-set-uri: "http://svc-keycloak:8080/realms/group1team2/protocol/openid-connect/certs"
  # https://docs.spring.io/spring-cloud-gateway/reference/spring-cloud-gateway/request-predicates-factories.html
  cloud:
    gateway:
      discovery:
        locator:
          enabled: false
          # lowerCaseServiceId: true
      httpclient:
        connect-timeout: 1000
        response-timeout: 10s
      filter:
        request-rate-limiter:
          enabled: true
      default-filters:
      - CustomGlobalFilter
      routes:
      # spring.application.name
      - id: accounts
        # uri: https://127.0.0.1:8801
        uri: lb://accounts # lb(Load Balancing) 을 통해서 eureka 에 등록된 서비스로 라우팅
        # gateway로 들어오는 path
        predicates:
        - Path=/mobigen/accounts/**
        filters:
        - RewritePath=/mobigen/accounts/(?<segment>.*), /${segment}
        - AccountsServiceCustomFilter
        - CircuitBreaker=name=accountsCircuitBreaker,fallbackUri=forward:/contactSupport
      # CustomRouteConfig.java 파일로 이동
      # - id: cards
      #   uri: lb://cards # uri: https://127.0.0.1:8802
      #   predicates:
      #   - Path=/mobigen/cards/**
      #   filters:
      #   - RewritePath=/mobigen/cards/(?<segment>.*), /${segment}
      #   - AddResponseHeader=X-Response-Time, '#{T(java.time.LocalDateTime).now().toString()}'
      #   - name: RequestRateLimiter
      #     args:
      #       key-resolver:
      #         expression: "headers['user'] ?: 'anonymous'"
      #       redis-rate-limiter.replenishRate: 1 # 초당 버킷에 추가되는 토큰 개수
      #       redis-rate-limiter.burstCapacity: 1 # 버킷에 담을 수 있는 최대 토큰 개수
      #       redis-rate-limiter.requestedTokens: 1 # API 요청 시 소비되는 토큰 개수
      - id: loans
        # uri: https://127.0.0.1:8803
        uri: lb://loans
        predicates:
        - Path=/mobigen/loans/**
        filters:
        - RewritePath=/mobigen/loans/(?<segment>.*), /${segment}
        # - RequestRateLimiter=replenishRate=1,burstCapacity=1,requestedTokens=1
        # - Retry=3,method=GET,backoff=100ms,1000ms,2,true
        - name: Retry
          args:
            retries: 3
            statuses: BAD_GATEWAY
            methods: GET
            backoff:
              firstBackoff: 100ms
              maxBackoff: 1000ms
              factor: 2
              basedOnPreviousValue: false

eureka:
  instance:
    instance-id: ${spring.cloud.client.ip-address}:${random.value}
    prefer-ip-address: true
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: http://svc-eureka-app:8761/eureka # eureka 서버가 여러 대 일 경우에 "," 추가해주면 된다.

logging:
  config: classpath:log4j2.xml
  # level:
  #   '[org.springframework.security]': DEBUG 
  level:
    '[org.springframework.security]': TRACE
    '[org.springframework.security.web.server]': TRACE
    '[org.springframework.security.web.server.SecurityWebFilterChain]': TRACE
    '[org.springframework.security.web.server.authorization]': TRACE

# ==== spring actuator properties ====
management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      access: unrestricted
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

resilience4j:
 circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 2
      failureRateThreshold: 50
      waitDurationInOpenState: 10000
  instances:
    accountsCircuitBreaker:
      registerHealthIndicator: true
      slidingWindowSize: 100
      permittedNumberOfCallsInHalfOpenState: 10
      waitDurationInOpenState: 10s
      failureRateThreshold: 50
      slowCallRateThreshold: 100
      slowCallDurationThreshold: 60s
      minimumNumberOfCalls: 10
      automaticTransitionFromOpenToHalfOpenEnabled: true
      maxWaitDurationInHalfOpenState: 10000
  timelimiter:
    instances:
      default:
        timeoutDuration: 10s


# rate-limiter:
#   redis:
#     replenishRate: 1
#     burstCapacity: 1
#     requestedTokens: 1
#   key-resolver:
#     expression: "headers['user'] ?: 'anonymous'"